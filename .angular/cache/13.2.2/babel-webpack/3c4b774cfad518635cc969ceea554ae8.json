{"ast":null,"code":"import { PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nexport let StorageService = /*#__PURE__*/(() => {\n  class StorageService {\n    constructor(platformId) {\n      this.inMemoryStorage = {};\n\n      if (isPlatformBrowser(platformId)) {\n        this.localStorage = window.localStorage;\n      } else {}\n    }\n    /**\r\n     * Check if local storage is supported\r\n     * @returns boolean\r\n     */\n\n\n    isSupported() {\n      return false; // try {\n      //   console.info('Local Storage is supported.');\n      //   const testKey = '__some_random_key_you_are_not_going_to_use__';\n      //   this.localStorage.setItem(testKey, testKey);\n      //   this.localStorage.removeItem(testKey);\n      //   return true;\n      // } catch (e) {\n      //   console.warn('Local Storage is not supported switch to inMemory storage');\n      //   return false;\n      // }\n    }\n    /**\r\n     * Get a specific item by key name\r\n     * @param name string The name of the item in local storage\r\n     * @return mixed string|null\r\n     */\n\n\n    getItem(name) {\n      if (this.isSupported()) {\n        return this.localStorage.getItem(name);\n      }\n\n      if (this.inMemoryStorage.hasOwnProperty(name)) {\n        return this.inMemoryStorage[name];\n      }\n\n      return null;\n    }\n    /**\r\n     * Get specific ITem by index\r\n     * @param index number The index of the element\r\n     * @return mixed string|null\r\n     */\n\n\n    key(index) {\n      if (this.isSupported()) {\n        return this.localStorage.key(index);\n      }\n\n      if (this.inMemoryStorage[index]) {\n        return this.inMemoryStorage[index];\n      }\n\n      return null;\n    }\n    /**\r\n     * Remove an item from local storage of the browser\r\n     * @param name the key of the item in local storage\r\n     * @return void\r\n     */\n\n\n    removeItem(name) {\n      if (this.isSupported()) {\n        this.localStorage.removeItem(name);\n      } else {\n        delete this.inMemoryStorage[name];\n      }\n    }\n    /**\r\n     * Set value of an item w\r\n     * @param name the key name\r\n     * @param value the value for specified key {name}\r\n     * @return void\r\n     */\n\n\n    setItem(name, value) {\n      if (this.isSupported()) {\n        this.localStorage.setItem(name, value);\n      } else {\n        this.inMemoryStorage[name] = value;\n      }\n    }\n    /**\r\n     * Clear the whole local storage\r\n     * @return void\r\n     */\n\n\n    clear() {\n      if (this.isSupported()) {\n        this.localStorage.clear();\n      } else {\n        this.inMemoryStorage = {};\n      }\n    }\n\n  }\n\n  StorageService.ɵfac = function StorageService_Factory(t) {\n    return new (t || StorageService)(i0.ɵɵinject(PLATFORM_ID));\n  };\n\n  StorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StorageService,\n    factory: StorageService.ɵfac,\n    providedIn: 'root'\n  });\n  return StorageService;\n})();","map":null,"metadata":{},"sourceType":"module"}