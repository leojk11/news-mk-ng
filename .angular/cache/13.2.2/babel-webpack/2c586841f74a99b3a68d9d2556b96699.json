{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { API_URL } from '../tokens/api.token';\nimport { distinctUntilChanged, pluck, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./storage.service\";\nimport * as i3 from \"@angular/router\";\nconst initialState = {};\nconst currentAuthUser = 'currentUser';\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(apiUrl, http, storageService, router) {\n      var _a;\n\n      this.apiUrl = apiUrl;\n      this.http = http;\n      this.storageService = storageService;\n      this.router = router;\n      this.auth = new BehaviorSubject((_a = this.localStorageAuthState) !== null && _a !== void 0 ? _a : initialState);\n      this.auth$ = this.auth.asObservable().pipe(distinctUntilChanged());\n      this.user$ = this.auth$.pipe(pluck('user'));\n    }\n\n    get state() {\n      return this.auth.getValue();\n    }\n\n    get isLoggedIn() {\n      var _a;\n\n      return !!((_a = this.state) === null || _a === void 0 ? void 0 : _a.id);\n    }\n\n    adminLogin(payload) {\n      const path = `${this.apiUrl}/admins/login`;\n      return this.http.post(path, payload).pipe(tap(res => {\n        this.setAuthData(res.userData);\n        this.storageService.setItem(currentAuthUser, JSON.stringify(res.userData));\n      }));\n    }\n\n    logout() {\n      this.setAuthData(null);\n      this.storageService.removeItem(currentAuthUser);\n      this.router.navigateByUrl('/back/login').then();\n    }\n\n    setAuthData(authData) {\n      if (authData) {\n        this.auth.next(Object.assign({}, authData));\n      } else {\n        this.auth.next({});\n      }\n    }\n\n    get localStorageAuthState() {\n      const local = this.storageService.getItem(currentAuthUser);\n\n      if (local) {\n        return JSON.parse(local);\n      }\n\n      return undefined;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(API_URL), i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StorageService), i0.ɵɵinject(i3.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}